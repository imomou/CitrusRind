AWSTemplateFormatVersion: 2010-09-09
Description: Template for macro, please refer here for source of truth
Parameters:
  LambdaBucket:
    Description: 'Bucket where Lambda Code are Hosted.'
    Type: 'String'
    Default: ''
  LambdaPath:
    Description: 'Root Path to Where Lambda Code are Hosted.'
    Type: 'String'
  LogLevel:
    Type: 'String'
    Default: 30

Conditions:
  IsLambdaBucketParamEmpty: !Equals [!Ref LambdaBucket, '']

Resources:
  Macro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: AlbPriorityAssigner
      Description: Transform the original template providing a randomise rule for ALB
      FunctionName: !Ref MacroProcessor
  MacroProcessor: 
    Type: 'AWS::Lambda::Function'
    Properties: 
      FunctionName: MacroProcessor
      Runtime: 'go1.x'
      Description: IAM Users Macro processor function
      Handler: 'main'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !If [IsLambdaBucketParamEmpty, !Sub "glenfiddich-${AWS::Region}", !Ref LambdaBucket]
        S3Key: !Ref LambdaPath
      Timeout: 100
      MemorySize: 128
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          RULECAP: 50000
          REGION: !Ref 'AWS::Region'
  MacroProcessorLog:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${MacroProcessor}'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
            Action: ['sts:AssumeRole']
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: macro-processor-lambda-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ['cloudformation:Get*']
            Resource: '*'      
          - Effect: Allow
            Action: ['logs:CreateLogStream', 'logs:PutLogEvents', 'logs:DescribeLogStreams']
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${MacroProcessor}*'
          - Effect: Allow
            Action: ['elasticloadbalancing:Describe*']
            Resource: '*'        
      Roles: [!Ref LambdaExecutionRole]